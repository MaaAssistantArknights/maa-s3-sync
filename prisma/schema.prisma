generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ERROR
}

enum VersionChannel {
  STABLE
  BETA
  ALPHA
}

model Job {
  id          Int       @id @default(autoincrement())
  taskSlug    String
  status      JobStatus @default(PENDING)
  logFile     String?
  triggeredBy String    @default("*SYSTEM*")

  startedAt DateTime?
  finishedAt DateTime?

  syncId Int
  sync   PackageSync @relation(fields: [syncId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id      Int    @id @default(autoincrement())
  module  String
  action  String
  message String

  createdAt DateTime @default(now())
}

model Version {
  id          Int            @id @default(autoincrement())
  channel     VersionChannel
  display     String         @unique
  releaseDate DateTime
  packages    Package[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Package {
  id          Int          @id @default(autoincrement())
  nodeId      String       @unique
  triplet     String
  downloadUrl String?
  s3Url       String?
  fileName    String       @unique
  sync        PackageSync?

  versionId Int
  version   Version @relation(fields: [versionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PackageSync {
  id Int @id @default(autoincrement())

  packageId Int     @unique
  package   Package @relation(fields: [packageId], references: [id])

  jobs Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SecretKey {
  id        Int       @id @default(autoincrement())
  key       String    @unique
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
